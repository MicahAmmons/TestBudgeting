@using TestBudgeting.Models.Weather
@model Home

<head>
    <link rel="stylesheet" href="/css/site.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            color: #FFD5A7;
            background-color: #3E1B24;
        }

        th {
            background-color: #3E1B24;
            color: #FFD5A7;
            font-weight: bold;
            font-size: 25px;
            border-bottom: 2px solid #FFD5A7; 
        }

        td {
            padding: 10px;
            text-align: left;
            color: #FFD5A7;
            
            font-size: 15px;
        }

            th:first-child,
            td:first-child {
                width: 5%; /* Checkbox column width */
            }

            th:nth-child(2),
            td:nth-child(2) {
                width: 65%; /* Details column width */
            }

            th:nth-child(3),
            td:nth-child(3) {
                width: 15%; /* Date column width */
            }

            th:nth-child(4),
            td:nth-child(4) {
                width: 15%; /* Repeat column width */
            }

        .delete-icon {
            color: red; 
            cursor: pointer; 
            font-size: 10px; 
        }

            .delete-icon:hover {
               
            }



    </style>
</head>

<body>
    
    <div>
        <h1 style="font-size: 30px; margin-left: 10px;">@DateTime.Now.ToString("dddd, MMMM dd")</h1>
    </div>


    <!--Weather Grid-->
    <div style="display: flex; justify-content: space-between; width: 50%;">
    <!--Weather1-->
        <div style="display: grid; grid-template-rows: repeat(4, 1fr); grid-template-columns: repeat(4, 1fr); width: 50%; height: 150px; border-right: 1px solid #FFD5A7;">
        <!-- Name -->
            <div style="grid-row: 1 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: left; text-align: center;">
                <h1 style="font-weight: bold; font-size: 30px">@Model.Weather1Var.CityName</h1>
            </div>
        <!-- Sun Up -->
        <div style="grid-row: 2 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
            <span>🔅 ↑ @Model.Weather1Var.SunUp</span>
        </div>
        <!-- Sun Down -->
        <div style="grid-row: 3 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
            <span>🔅 ↓ @Model.Weather1Var.SunDown</span>
        </div>
        <!-- Wind -->
        <div style="grid-row: 4 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
            <span>༄ @Model.Weather1Var.Wind MPH</span>
        </div>
        <!-- Temp -->
        <div style="grid-row: 2 / span 2; grid-column: 3 / span 1; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
            <span style="font-size: 35px"> <span style="font-size: 20px">🌡</span>@Model.Weather1Var.Temp</span>
        </div>
        <!-- High Temp -->
        <div style="grid-row: 2 / span 1; grid-column: 4 / span 1; display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-start; text-align: left;">
            <span>@Model.Weather1Var.High ↑</span>
        </div>
        <div style="grid-row: 3 / span 1; grid-column: 4 / span 1; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start; text-align: left;">
            <span>@Model.Weather1Var.Low ↓</span>
        </div>
        <!-- Feels Like -->
        <div style="grid-row: 4 / span 1; grid-column: 3 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: flex-start; text-align: left;">
            <span>Feels: @Model.Weather1Var.FeelsLike</span>
        </div>
    </div>
    <!--Weathe 2-->
            <div style="display: grid; grid-template-rows: repeat(4, 1fr); grid-template-columns: repeat(4, 1fr); width: 50%; height: 150px">
                <!-- Name -->
                <div style="grid-row: 1 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: left; align-items: stretch; text-align: center;">
                    <h1 style="font-weight: bold; font-size: 30px">@Model.Weather2Var.CityName</h1>
                </div>
                <!-- Sun Up -->
                <div style="grid-row: 2 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
                    <span>🔅 ↑ @Model.Weather2Var.SunUp</span>
                </div>
                <!-- Sun Down -->
                <div style="grid-row: 3 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
                    <span>🔅 ↓ @Model.Weather2Var.SunDown</span>
                </div>
                <!-- Wind -->
                <div style="grid-row: 4 / span 1; grid-column: 1 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
                    <span>༄ @Model.Weather2Var.Wind MPH</span>
                </div>
                <!-- Temp -->
                <div style="grid-row: 2 / span 2; grid-column: 3 / span 1; display: flex; flex-direction: column; justify-content: center; align-items: stretch; text-align: center;">
                    <span style="font-size: 35px"> <span style="font-size: 20px">🌡</span>@Model.Weather2Var.Temp</span>
                </div>
                <!-- High Temp -->
                <div style="grid-row: 2 / span 1; grid-column: 4 / span 1; display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-start; text-align: left;">
                    <span>@Model.Weather2Var.High ↑</span>
                </div>
                <div style="grid-row: 3 / span 1; grid-column: 4 / span 1; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start; text-align: left;">
                    <span>@Model.Weather2Var.Low ↓</span>
                </div>
                <!-- Feels Like -->
                <div style="grid-row: 4 / span 1; grid-column: 3 / span 2; display: flex; flex-direction: column; justify-content: center; align-items: flex-start; text-align: left;">
                    <span>Feels: @Model.Weather2Var.FeelsLike</span>
                </div>
            </div>
    </div>



    <div style="width: 50%; margin-top: 100px">
        <table>
            <thead>
                <tr>
                    <th>             </th> <!-- Checkbox column -->
                    <th>Details</th>
                    <th>Date</th>
                    <th>Repeat</th>
       
                </tr>
            </thead>
            <tbody>
                @foreach (var reminder in Model.Reminders)
                {
                    <tr>
                        <td>
                            <input type="checkbox" data-id="@reminder.ID" class="complete-checkbox" />
                            <i class="delete-icon" data-id="@reminder.ID">&#10006;</i>


                        </td>
                        <td style="display: none">@reminder.ID</td>
                        <td>@reminder.Details</td>
                    <td>@reminder.Date.ToString("MMM d")</td>
                        <td> @reminder.Weekly</td>
                        <td style="display: none">@reminder.Complete</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>

    <style>
        input::placeholder {
            font-size: 14px;
            color: #3E1B24;
        }
    </style>

    <form method="POST" action="/Home/AddReminder" id="reminderForm" style="width: 50%; text-align: left; margin: 0; padding: 0; display: flex; align-items: center;">
        <button type="button" id="addReminderBtn" style="width: 3%; font-size: 25px; height: 100%; font-weight: bold; color: green; border: none; background: none; cursor: pointer; margin-right: 20px;">+</button>
        <input type="text" name="Reminder.Details" placeholder="Details" style="width: 65%; height: 12px; padding: 10px; margin: 1px; margin-right: 10px; font-size: 14px;">
        <input type="date" name="Reminder.DateAsString" style="width: 16%; height: 12px; padding: 10px; margin: 1px; margin-right: 10px; background-color: #FFD5A7; font-size: 14px;">
        <input type="text" name="Reminder.Weekly" placeholder="Weekly" style="width: 16%; height: 12px; padding: 10px; margin: 1px; font-size: 14px;">
    </form>


    <div id="successMessage" style="display: none; color: green; margin-top: 10px;">Reminder added successfully.</div>

    <script>
        document.getElementById('addReminderBtn').addEventListener('click', function () {
            // Get form data
            var formData = new FormData(document.getElementById('reminderForm'));

            // Make an AJAX POST request to the server
            $.ajax({
                url: '/Home/AddReminder',  // Replace with the actual URL of your server-side endpoint
                type: 'POST',
                data: formData,
                processData: false,  // Prevent jQuery from processing the data
                contentType: false,  // Set content type to false, jQuery will set it automatically
                success: function (response) {
                    // Handle success, e.g., show a success message
                    document.getElementById('successMessage').style.display = 'block';

                    // Reset the form
                    document.getElementById('reminderForm').reset();
                },
                error: function (error) {
                    // Handle error, e.g., show an error message
                    console.error(error);
                }
            });
        });
    </script>



    <h1>   ...</h1>
    <div>
        <a href="/Expense/InsertExpense" class="hyper-link">Add Expense</a>
    </div>

</body>












<script> // Script to update reminders to completed
    // Attach a click event handler to the checkboxes with class "complete-checkbox"
    $(".complete-checkbox").on("click", function () {
        // Get the checkbox element and the associated table row
        var checkbox = $(this);
        var row = checkbox.closest("tr");

        // Get the ID value from the data attribute
        var id = checkbox.data("id");

        // Make an AJAX request to the CompleteReminder method with the ID as a parameter
        $.ajax({
            url: '/Home/CompleteReminder',
            type: 'POST', // Or 'GET' depending on your method
            data: { id: id },
            success: function (result) {
                // If the AJAX request is successful, hide the row
                row.hide();
            },
            error: function (error) {
                // Handle errors if any
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        // Attach a click event handler to the delete icons
        $('.delete-icon').on('click', function () {
            // Store a reference to the current row for later hiding
            var rowToDelete = $(this).closest('tr');

            // Get the reminder ID from the data-id attribute
            var reminderId = $(this).data('id');

            // Confirm with the user (you can customize this part)
            if (confirm('Are you sure you want to delete this reminder?')) {
                // Make an AJAX request to the DeleteReminder controller method
                $.ajax({
                    type: 'POST', // Use POST or GET as needed
                    url: '/Home/DeleteReminder', // Replace 'ControllerName' with your actual controller name
                    data: { id: reminderId }, // Pass the reminder ID as data
                    success: function (response) {
                        // Handle the success response
                        // Hide the row from the display page
                        rowToDelete.hide();
                    },
                    error: function (xhr, status, error) {
                        // Handle the error (if needed)
                        console.error('Error:', status, error);
                    }
                });
            }
        });
    });
</script>
