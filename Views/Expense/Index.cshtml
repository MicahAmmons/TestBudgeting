@using TestBudgeting.Models.Expense
@model IEnumerable<Expense>

<head>
    <style>
        header {
            background-color: #3E1B24;
            font-size: 20px;
        }

        body {
            background-color: #3E1B24;
            color: #3E1B24;
            font-size: 20px;
        }

        a { /*Text color of hyperlinks*/
            color: #3E1B24;
            padding: 1px 10px;
            font-weight: bold;
            text-decoration: none;
            font-size: 30px;
        }

            a:hover {
                background-color: #FFD5A7;
            }

            a.body-link {
                color: #3E1B24;
                background-color: #FFD5A7;
                border-radius: 5px;
                padding: 5px, 5px;
            }

                a.body-link:hover {
                    background-color: #3E1B24;
                    color: #FFD5A7;
                }
        </style>
        </head>

<!--Row includes: Insert Expense Button -->
<div class="row">
    <div class="col-md-offset-0 col-md-5">
        <div style="display: block">
            <style>
                .toggle {
                    font-size: 20px; /* Adjust the font size as needed */
                    background-color: #FFD5A7;
                    border-radius: 5px;
                    padding: 5px 10px; /* Adjust padding for top and right */
                    margin-left: 10px; /* Add margin to create spaces */
                    font-weight: bold; /* Make the text bold */
                    display: inline-block; /* Ensure they are displayed inline */
                }
            </style>
            <a href="/Expense/InsertExpense" class="toggle">New Expense</a>
        </div>
    </div> 
</div>    
<!--Empty row to separate rows a bit-->
<div class="row">
    <div class="col-md-12">
        <h1> </h1>
    </div>
</div>

<!--Row includeds: Hide Buttons and Script-->
<div class="row">

            <style>
            .toggle {
                font-size: 20px; /* Adjust the font size as needed */
                background-color: #FFD5A7;
                border-radius: 5px;
                padding: 5px 10px; /* Adjust padding for top and right */
                margin-left: 10px; /* Add margin to create spaces */
                font-weight: bold; /* Make the text bold */
                display: inline-block; /* Ensure they are displayed inline */
            }
            </style>
            <div class="toggle-buttons">
                <span id="toggleNumber" class="toggle">Number</span>
                <span id="toggleAmount" class="toggle">Amount</span>
                <span id="togglePayee" class="toggle">Payee</span>
                <span id="toggleBudget" class="toggle">Budget</span>
                <span id="toggleMonth" class="toggle">Month</span>
                <span id="toggleDay" class="toggle">Day</span>
                <span id="toggleYear" class="toggle">Year</span>
                <script>
                    /* script that hides specific columns */
                    const expenseTable = document.getElementById('expenseTable');
                    const columnToggleButtons = document.querySelectorAll('.toggle');
                    const columnIndices = {
                        'toggleNumber': 0,
                        'toggleAmount': 1,  // Index 0 for Amount
                        'togglePayee': 2,   // Index 1 for Payee
                        'toggleBudget': 3,  // Index 2 for Budget
                        'toggleMonth': 4,   // Index 3 for Month
                        'toggleDay': 5,     // Index 4 for Day
                        'toggleYear': 6,    // Index 5 for Year
                    };
                    columnToggleButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            const columnId = button.id;
                            const columnIndex = columnIndices[columnId];
                            const columnCells = document.querySelectorAll(`td:nth-child(${columnIndex + 1})`);
                            const columnHeader = document.querySelector(`th:nth-child(${columnIndex + 1})`);

                            // Get the computed style
                            const cellDisplayStyle = window.getComputedStyle(columnCells[0]).getPropertyValue('display');

                            if (cellDisplayStyle === 'none') {
                                // Column is currently hidden, show it
                                columnCells.forEach((cell) => {
                                    cell.style.display = 'table-cell';
                                });
                                columnHeader.style.display = 'table-cell';
                            } else {
                                // Column is currently visible, hide it
                                columnCells.forEach((cell) => {
                                    cell.style.display = 'none';
                                });
                                columnHeader.style.display = 'none';
                            }
                        });
                    });
                </script>
            </div>
        </div>

<!--Empty row to separate rows a bit-->
<div class="row">
    <div class="col-md-12">
        <h1> </h1>
    </div>
</div>

<!--Row includes: Table that displays the Repository and Script to Sort Columns-->
<div class="row">
 
<div class="col-md-offset-5 col-md-7">
    <div class="table-container">
        <!--Style for the body of table.  Did the header styling in line-->
        <style>
            td {
                background-color: #3E1B24;
                color: #FFD5A7;
                font-weight: bold;
                font-size: 20px;
                text-align: center;
            }

                td:nth-child(3) {
                    text-align: left;
                }
        </style>
        <!--Table Start-->
        <table class="table table-condensed" id="expenseTable" style="border-collapse: collapse; border: none !important;">
            <thead style="position: sticky; top: 0;">
                <tr>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Number</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Amount</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Payee</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Budget</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Month</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Day</th>
                    <th style="background-color: #FFD5A7; color: #3E1B24; font-weight: bold; font-size: 20px; text-align: center; padding: 5px;">Year</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in Model)
                {
                    <tr>
                            <td><a href="/Expense/ViewExpense/@expense.Number" class="body-link">@expense.Number</a></td>
                        <td style="max-width: 25px;">@expense.Amount</td>
                        <td style="max-width: 75px;">@expense.Payee</td>
                        <td style="max-width: 35px;">@expense.Budget</td>
                        <td style="max-width: 10px;">@expense.Month</td>
                        <td style="max-width: 10px;">@expense.Day</td>
                        <td style="max-width: 15px;">@expense.Year</td>
                    </tr>
                }
            </tbody>
        </table>
        <!--Script for sorted the columns.  Clicking the header sorts by that value-->
        <script>
            const table = document.querySelector('.table-condensed');
            let ascending = true;
            for (let i = 0; i < table.rows[0].cells.length; i++) {
                table.rows[0].cells[i].addEventListener('click', function () {
                    sortTable(i);
                });
            }
            function sortTable(columnIndex) {
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.rows);
                rows.sort((a, b) => {
                    const aValue = a.cells[columnIndex].textContent;
                    const bValue = b.cells[columnIndex].textContent;
                    return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                });
                // Remove columns from the tbody
                rows.forEach((row) => {
                    tbody.removeChild(row);
                });
                // Add sorted columns back to the tbody
                rows.forEach((row) => {
                    tbody.appendChild(row);
                });
                ascending = !ascending;
            }
        </script>
        <script>
            // Handle the click event for the "Create a New Product" link
            $("#createExpenseLink").click(function () {
            $.get("/Product/InsertProductView", function (data) {
            // Replace the content of the container with the InsertProductView content
            $("#insertProductContainer").html(data);
            });
            });
            </script>
    </div>

    </div>
</div>