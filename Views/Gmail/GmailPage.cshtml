<html>
    <head>
    <style>

        header {
            background-color: #3E1B24;
            font-size: 20px;
        }

        body {
            background-color: #3E1B24;
            color: #3E1B24;
            font-size: 20px;
            color: #FFD5A7;
        }

        a { /*Text color of hyperlinks*/
            color: #3E1B24;
            padding: 1px 10px;
            font-weight: bold;
            text-decoration: none;
            font-size: 30px;
        }

            a:hover {
                background-color: #FFD5A7;
            }

            a.body-link {
                color: #3E1B24;
                background-color: #FFD5A7;
                border-radius: 5px;
                padding: 5px, 5px;
            }

                a.body-link:hover {
                    background-color: #3E1B24;
                    color: #FFD5A7;
                }

    </style>
</head>
<body>
    <!--Add buttons to initiate auth sequence and sign out-->
    <div>
    <button id="authorize_button" onclick="handleAuthClick()">Authorize</button>
    <button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>
        <pre id="content" style="white-space: pre-wrap;"></pre>
    </div>




    <script type="text/javascript">
        /* exported gapiLoaded */
        /* exported gisLoaded */
        /* exported handleAuthClick */
        /* exported handleSignoutClick */

        const CLIENT_ID = '858508829491-fdvlfmrgsh4v14s779lrfi2m7e1tle30.apps.googleusercontent.com';
        const API_KEY = 'AIzaSyCqQUPyxqEK2Khr6inXFgOhQBEdUcAxpaA';

        // Discovery doc URL for APIs used by the quickstart
        const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest';
        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        const SCOPES = 'https://www.googleapis.com/auth/gmail.compose';

        let tokenClient;
        let gapiInited = false;
        let gisInited = false;

        document.getElementById('authorize_button').style.visibility = 'hidden';
        document.getElementById('signout_button').style.visibility = 'hidden';

        //Checking for existing Auth Tokens
        const storedAccessToken = localStorage.getItem('access_token');
        const storedRefreshToken = localStorage.getItem('refresh_token');

        if (storedAccessToken) {
            // Set the stored access token in the client
            gapi.client.setToken({ access_token: storedAccessToken });
            // You may also want to check if the access token is still valid here

            // Show the authorized view
            document.getElementById('authorize_button').style.visibility = 'hidden';
            document.getElementById('signout_button').style.visibility = 'visible';
            listLabels(); // Fetch and display labels

        } else {
            // User needs to authorize the application
            document.getElementById('authorize_button').style.visibility = 'visible';
            document.getElementById('signout_button').style.visibility = 'hidden';
        }

        
         //Callback after api.js is loaded.
         
        function gapiLoaded() {
            gapi.load('client', initializeGapiClient);
        }

        
        // Callback after the API client is loaded. Loads the discovery doc to initialize the API.

         
        async function initializeGapiClient() {
            await gapi.client.init({
                apiKey: API_KEY,
                discoveryDocs: [DISCOVERY_DOC],
            });
            gapiInited = true;
            maybeEnableButtons();
        }

        
         //Callback after Google Identity Services are loaded.
         
        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '', // defined later
            });
            gisInited = true;
            maybeEnableButtons();
        }

        
         //Enables user interaction after all libraries are loaded.
        function maybeEnableButtons() {
            if (gapiInited && gisInited) {
                document.getElementById('authorize_button').style.visibility = 'visible';
            }
        }
         // Sign in the user upon button click.
         function handleAuthClick() {
            tokenClient.callback = async (resp) => {
                if (resp.error !== undefined) {
                    throw (resp);
                }
                document.getElementById('signout_button').style.visibility = 'visible';
                document.getElementById('authorize_button').innerText = 'Refresh';
                await listLabels();
            };

            if (gapi.client.getToken() === null) {
                // Prompt the user to select a Google Account and ask for consent to share their data
                // when establishing a new session.
                tokenClient.requestAccessToken({ prompt: 'consent' });
            } else {
                // Skip display of account chooser and consent dialog for an existing session.
                tokenClient.requestAccessToken({ prompt: '' });
            }
        }

        // Callback after successful authentication
        tokenClient.callback = async (resp) => {
            if (resp.error !== undefined) {
                throw (resp);
            }
            // Store the access token and refresh token securely
            localStorage.setItem('access_token', resp.access_token);
            localStorage.setItem('refresh_token', resp.refresh_token);

            document.getElementById('signout_button').style.visibility = 'visible';
            document.getElementById('authorize_button').innerText = 'Refresh';
            await listLabels();
        };



        // Sign out the user upon button click.

        function handleSignoutClick() {
            const token = gapi.client.getToken();
            if (token !== null) {
                google.accounts.oauth2.revoke(token.access_token);
                gapi.client.setToken('');
                document.getElementById('content').innerText = '';
                document.getElementById('authorize_button').innerText = 'Authorize';
                document.getElementById('signout_button').style.visibility = 'hidden';
            }
        }
        //Print all Labels in the authorized user's inbox. If no labels are found an appropriate message is printed
        async function listLabels() {
            let response;
            try {
                response = await gapi.client.gmail.users.labels.list({
                    'userId': 'me',
                });
            } catch (err) {
                document.getElementById('content').innerText = err.message;
                return;
            }
            const labels = response.result.labels;
            if (!labels || labels.length == 0) {
                document.getElementById('content').innerText = 'No labels found.';
                return;
            }
            // Flatten to string to display
            const output = labels.reduce(
                (str, label) => `${str}${label.name}\n`,
                'Labels:\n');
            document.getElementById('content').innerText = output;
        }




   
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
</body>
</html>